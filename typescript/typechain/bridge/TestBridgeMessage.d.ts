/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestBridgeMessageInterface extends ethers.utils.Interface {
  functions: {
    "testFormatDetailsHash(string,string,uint8)": FunctionFragment;
    "testFormatMessage(bytes,bytes,uint8,uint8)": FunctionFragment;
    "testFormatTokenId(uint32,bytes32)": FunctionFragment;
    "testFormatTransfer(bytes32,uint256,bytes32,bool)": FunctionFragment;
    "testIsFastTransfer(bytes)": FunctionFragment;
    "testIsTransfer(bytes)": FunctionFragment;
    "testIsValidAction(bytes,uint8)": FunctionFragment;
    "testIsValidMessageLength(bytes)": FunctionFragment;
    "testMessageType(bytes)": FunctionFragment;
    "testMustBeMessage(bytes)": FunctionFragment;
    "testSplitMessage(bytes)": FunctionFragment;
    "testSplitTokenId(bytes)": FunctionFragment;
    "testSplitTransfer(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "testFormatDetailsHash",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testFormatMessage",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testFormatTokenId",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testFormatTransfer",
    values: [BytesLike, BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsFastTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsValidAction",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsValidMessageLength",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testMessageType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testMustBeMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testSplitMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testSplitTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testSplitTransfer",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "testFormatDetailsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFormatMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFormatTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFormatTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsFastTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsValidAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsValidMessageLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMessageType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMustBeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSplitMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSplitTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSplitTransfer",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestBridgeMessage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestBridgeMessageInterface;

  functions: {
    testFormatDetailsHash(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    testFormatMessage(
      _tokenId: BytesLike,
      _action: BytesLike,
      _idType: BigNumberish,
      _actionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    testFormatTokenId(
      _domain: BigNumberish,
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    testFormatTransfer(
      _to: BytesLike,
      _amnt: BigNumberish,
      _detailsHash: BytesLike,
      _enableFast: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    testIsFastTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testIsTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testIsValidAction(
      _action: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testIsValidMessageLength(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testMessageType(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    testMustBeMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    testSplitMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    testSplitTokenId(
      _tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string]>;

    testSplitTransfer(
      _transfer: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string, BigNumber]>;
  };

  testFormatDetailsHash(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  testFormatMessage(
    _tokenId: BytesLike,
    _action: BytesLike,
    _idType: BigNumberish,
    _actionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  testFormatTokenId(
    _domain: BigNumberish,
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  testFormatTransfer(
    _to: BytesLike,
    _amnt: BigNumberish,
    _detailsHash: BytesLike,
    _enableFast: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  testIsFastTransfer(
    _action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testIsTransfer(
    _action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testIsValidAction(
    _action: BytesLike,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testIsValidMessageLength(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testMessageType(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  testMustBeMessage(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  testSplitMessage(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  testSplitTokenId(
    _tokenId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string, string]>;

  testSplitTransfer(
    _transfer: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string, string, BigNumber]>;

  callStatic: {
    testFormatDetailsHash(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    testFormatMessage(
      _tokenId: BytesLike,
      _action: BytesLike,
      _idType: BigNumberish,
      _actionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    testFormatTokenId(
      _domain: BigNumberish,
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    testFormatTransfer(
      _to: BytesLike,
      _amnt: BigNumberish,
      _detailsHash: BytesLike,
      _enableFast: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    testIsFastTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testIsTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testIsValidAction(
      _action: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testIsValidMessageLength(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testMessageType(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    testMustBeMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    testSplitMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    testSplitTokenId(
      _tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string]>;

    testSplitTransfer(
      _transfer: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    testFormatDetailsHash(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testFormatMessage(
      _tokenId: BytesLike,
      _action: BytesLike,
      _idType: BigNumberish,
      _actionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testFormatTokenId(
      _domain: BigNumberish,
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testFormatTransfer(
      _to: BytesLike,
      _amnt: BigNumberish,
      _detailsHash: BytesLike,
      _enableFast: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsFastTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsValidAction(
      _action: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsValidMessageLength(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testMessageType(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testMustBeMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSplitMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSplitTokenId(
      _tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSplitTransfer(
      _transfer: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    testFormatDetailsHash(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testFormatMessage(
      _tokenId: BytesLike,
      _action: BytesLike,
      _idType: BigNumberish,
      _actionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testFormatTokenId(
      _domain: BigNumberish,
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testFormatTransfer(
      _to: BytesLike,
      _amnt: BigNumberish,
      _detailsHash: BytesLike,
      _enableFast: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsFastTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsValidAction(
      _action: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsValidMessageLength(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testMessageType(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testMustBeMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSplitMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSplitTokenId(
      _tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSplitTransfer(
      _transfer: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
